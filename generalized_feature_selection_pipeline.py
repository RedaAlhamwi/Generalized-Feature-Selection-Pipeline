# -*- coding: utf-8 -*-
"""Generalized-Feature-Selection-Pipeline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T9IiH1-3Q6H_Upe1rpUd5vd1f6PFG7Y7
"""

import pandas as pd
import numpy as np
from scipy.stats import pearsonr, f_oneway
from statsmodels.stats.multicomp import pairwise_tukeyhsd
import warnings

warnings.filterwarnings("ignore")  # Suppress statsmodel warnings


class FeatureSelector:
    def __init__(self, df, target, cat_max_levels=50, alpha=0.05):
        self.df = df.copy()
        self.target = target
        self.alpha = alpha
        self.cat_max_levels = cat_max_levels
        self.numerical_results = []
        self.categorical_results = []

    def clean_data(self):
        # Fill missing numerical with median
        num_cols = self.df.select_dtypes(include=np.number).columns.drop(self.target)
        self.df[num_cols] = self.df[num_cols].fillna(self.df[num_cols].median())

        # Drop rows with missing target
        self.df = self.df.dropna(subset=[self.target])

        # Drop categorical features with too many levels
        for col in self.df.select_dtypes(include='object').columns:
            if self.df[col].nunique() > self.cat_max_levels:
                self.df = self.df.drop(columns=[col])

        # Drop rows with missing categorical values
        self.df.dropna(inplace=True)

    def numerical_feature_selection(self):
        print("Analyzing numerical features...")
        for col in self.df.select_dtypes(include=np.number).columns:
            if col == self.target:
                continue
            corr, p = pearsonr(self.df[col], self.df[self.target])
            self.numerical_results.append((col, corr, p))

        self.numerical_results = sorted(
            self.numerical_results, key=lambda x: abs(x[1]), reverse=True
        )
        return self.numerical_results

    def categorical_feature_selection(self):
        print("Analyzing categorical features with ANOVA and Tukey HSD...")
        for col in self.df.select_dtypes(include='object').columns:
            groups = [group[self.target].values for _, group in self.df.groupby(col)]
            if len(groups) < 2:
                continue
            try:
                f_stat, p_val = f_oneway(*groups)
                if p_val < self.alpha:
                    tukey = pairwise_tukeyhsd(endog=self.df[self.target],
                                              groups=self.df[col],
                                              alpha=self.alpha)
                    mean_diffs = np.abs(tukey.meandiffs)
                    avg_effect = np.mean(mean_diffs)
                    self.categorical_results.append((col, f_stat, avg_effect))
            except:
                continue

        self.categorical_results = sorted(
            self.categorical_results, key=lambda x: x[2], reverse=True
        )
        return self.categorical_results

    def run(self):
        self.clean_data()
        num_results = self.numerical_feature_selection()
        cat_results = self.categorical_feature_selection()

        print("\nTop Numerical Features:")
        for name, corr, p in num_results[:5]:
            print(f"{name}: Correlation = {corr:.3f}, p = {p:.4f}")

        print("\nTop Categorical Features:")
        for name, f, effect in cat_results[:5]:
            print(f"{name}: F-statistic = {f:.3f}, Avg Tukey Effect = {effect:.3f}")

        return {
            'top_numeric': [x[0] for x in num_results],
            'top_categorical': [x[0] for x in cat_results]
        }

# Load your dataset
df = pd.read_csv('/content/train.csv')
target = 'SalePrice'

selector = FeatureSelector(df, target)
results = selector.run()

# Show Tukey HSD for a significant categorical feature
if results['categorical']:
    selector.tukey_test(results['categorical'][0])



import matplotlib.pyplot as plt
import seaborn as sns

def plot_top_numerical_corr(df, numerical_df, top_n=10):
    top_features = numerical_df.sort_values(by='Correlation', ascending=False).head(top_n)
    plt.figure(figsize=(10,6))
    sns.barplot(x='Correlation', y='Feature', data=top_features, palette='viridis')
    plt.title(f'Top {top_n} Numerical Features by Pearson Correlation')
    plt.xlabel('Correlation with Target')
    plt.ylabel('Feature')
    plt.tight_layout()
    plt.show()

def plot_categorical_boxplots(df, categorical_features, target, top_n=5):
    for feature in categorical_features[:top_n]:
        plt.figure(figsize=(12,6))
        sns.boxplot(x=feature, y=target, data=df)
        plt.title(f'Distribution of {target} by {feature}')
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.show()


results = selector.run()

# Plot top numerical features
plot_top_numerical_corr(df, results['numerical_df'], top_n=10)

# Plot boxplots for top categorical features
plot_categorical_boxplots(df, results['categorical'], target, top_n=5)

